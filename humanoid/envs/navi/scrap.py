
# import rvo2
# import matplotlib.pyplot as plt

# sim = rvo2.PyRVOSimulator(1/60., 1.5, 5, 1.5, 2, 0.4, 2)

# # Pass either just the position (the other parameters then use
# # the default values passed to the PyRVOSimulator constructor),
# # or pass all available parameters.
# a0 = sim.addAgent((0, 0))
# a1 = sim.addAgent((1, 0))
# a2 = sim.addAgent((1, 1))
# a3 = sim.addAgent((0, 1), 1.5, 5, 1.5, 2, 0.4, 2, (0, 0))

# # Obstacles are also supported.
# #o1 = sim.addObstacle([(0.1, 0.1), (-0.1, 0.1), (-0.1, -0.1)])
# #sim.processObstacles()

# sim.setAgentPrefVelocity(a0, (1, 1))
# sim.setAgentPrefVelocity(a1, (-1, 1))
# sim.setAgentPrefVelocity(a2, (-1, -1))
# sim.setAgentPrefVelocity(a3, (1, -1))

# print('Simulation has %i agents and %i obstacle vertices in it.' %
#       (sim.getNumAgents(), sim.getNumObstacleVertices()))

# print('Running simulation')
# posx = []
# posy = []

# for step in range(600):
#     sim.doStep()

#     #positions = ['(%5.3f, %5.3f)' % sim.getAgentPosition(agent_no)
#      #            for agent_no in (a0, a1, a2, a3)]
#     posx.append(sim.getAgentPosition(0)[0])
#     posy.append(sim.getAgentPosition(0)[1])

#     #print('step=%2i  t=%.3f  %s' % (step, sim.getGlobalTime(), '  '.join(positions)))

# fig, ax = plt.subplots()
# ax.plot(posx,posy)
# plt.show()

# d = [(0.0, 0.0), (6.721599102020264, 0.7232652902603149), (3.0477354526519775, -0.6414909362792969), (3.93259596824646, 0.14044170081615448), (7.8097333908081055, 0.8698712587356567), (1.5397863388061523, 0.903937041759491), (3.7921488285064697, 0.5613913536071777), (6.304775238037109, -0.4278828203678131), (5.480291366577148, -0.6224727034568787), (2.96583890914917, -0.5672702193260193), (4.477538585662842, -0.1097126379609108), (4.241143226623535, -0.7538033723831177), (4.942166805267334, -0.32627594470977783), (-7.8354811668396, -0.8940441608428955), (-4.111992359161377, -0.021290291100740433), (-2.8231287002563477, 0.876797616481781), (-4.186506748199463, -0.9698785543441772), (-0.4793194830417633, -0.2933098375797272), (-1.9332324266433716, -0.19172298908233643), (-6.372372150421143, 0.08787242323160172), (-7.450740814208984, 0.8467638492584229), (-1.3689321279525757, 0.480281800031662), (-3.746772289276123, -0.690254807472229), (-4.444309234619141, 0.22278915345668793), (-7.932017803192139, -0.6784950494766235), (-4.692451477050781, -0.8706209659576416), (-5.754573345184326, 0.7087566256523132), (-1.0371098518371582, -0.7718771696090698), (6.5696516036987305, -0.3644934296607971), (7.64982271194458, -0.6432467699050903), (-6.516759395599365, -0.02641167677938938), (-1.1308801174163818, 0.8844640851020813), (-4.072530269622803, -0.7171639800071716), (-4.543037414550781, -0.370934396982193), (1.1176594495773315, -0.7438127398490906)]
# c = [(0.0, 0.0), (4.983213424682617, 0.4835739731788635), (7.539602279663086, 0.4797971546649933), (0.23204182088375092, -0.06875468790531158), (5.19179630279541, 0.8018009662628174), (3.7525522708892822, -0.5068543553352356), (4.591529369354248, -0.9737716317176819), (2.235858917236328, 0.8326907157897949), (1.2768336534500122, 0.594294011592865), (4.939620018005371, -0.7466015219688416), (6.971238136291504, -0.5810872316360474), (7.859368801116943, 0.7448155283927917), (7.691823959350586, 0.07844693958759308), (-6.361763954162598, 0.8819519877433777), (-0.26748549938201904, 0.7874833345413208), (-5.110480308532715, -0.668087899684906), (-7.478882312774658, -0.39728179574012756), (-7.972935199737549, 0.35586848855018616), (-5.520336627960205, 0.637036144733429), (-5.4736552238464355, -0.037563227117061615), (-7.543992519378662, 0.9501991271972656), (-2.0016398429870605, 0.689761757850647), (-1.6980935335159302, -0.26763105392456055), (-7.927372932434082, -0.9065457582473755), (-0.35856080055236816, -0.6069566607475281), (6.874485015869141, 0.8840876817703247), (-2.3233087062835693, 0.04940364137291908), (-6.271153926849365, 0.4967961013317108), (5.7551093101501465, -0.9267368316650391), (-6.541121959686279, -0.3185189366340637), (6.689394950866699, -0.3200809359550476), (0.7223045825958252, -0.3750992715358734), (-5.160355567932129, -0.8436075448989868), (3.0267934799194336, 0.9934536218643188), (-7.223165512084961, 0.9733982086181641)]
# b = [(0.0, 0.0), (4.983213424682617, 0.4835739731788635), (7.539602279663086, 0.4797971546649933), (0.23204182088375092, -0.06875468790531158), (5.19179630279541, 0.8018009662628174), (3.7525522708892822, -0.5068543553352356), (4.591529369354248, -0.9737716317176819), (2.235858917236328, 0.8326907157897949), (1.2768336534500122, 0.594294011592865), (4.939620018005371, -0.7466015219688416), (6.971238136291504, -0.5810872316360474), (7.859368801116943, 0.7448155283927917), (7.691823959350586, 0.07844693958759308), (-6.361763954162598, 0.8819519877433777), (-0.26748549938201904, 0.7874833345413208), (-5.110480308532715, -0.668087899684906), (-7.478882312774658, -0.39728179574012756), (-7.972935199737549, 0.35586848855018616), (-5.520336627960205, 0.637036144733429), (-5.4736552238464355, -0.037563227117061615), (-7.543992519378662, 0.9501991271972656), (-2.0016398429870605, 0.689761757850647), (-1.6980935335159302, -0.26763105392456055), (-7.927372932434082, -0.9065457582473755), (-0.35856080055236816, -0.6069566607475281), (6.874485015869141, 0.8840876817703247), (-2.3233087062835693, 0.04940364137291908), (-6.271153926849365, 0.4967961013317108), (5.7551093101501465, -0.9267368316650391), (-6.541121959686279, -0.3185189366340637), (6.689394950866699, -0.3200809359550476), (0.7223045825958252, -0.3750992715358734), (-5.160355567932129, -0.8436075448989868), (3.0267934799194336, 0.9934536218643188), (-7.223165512084961, 0.9733982086181641)]
# a = [(0.0, 0.0), (4.983213424682617, 0.4835739731788635), (7.539602279663086, 0.47979715
# 46649933), (0.23204182088375092, -0.06875468790531158), (5.19179630279541, 0.8018009662628174), (3.7525522708892822, -0.5068543553352356), (4.591529369354248, -0.9737716317176819), (2.235858917236328, 0.8326907157897949), (1.2768336534500122, 0.594294011592865), (4.939620018005371, -0.7466015219688416), (6.971238136291504, -0.5810872316360474), (7.859368801116943, 0.7448155283927917), (7.691823959350586, 0.07844693958759308), (-6.361763954162598, 0.8819519877433777), (-0.26748549938201904, 0.7874833345413208), (-5.110480308532715, -0.668087899684906), (-7.478882312774658, -0.39728179574012756), (-7.972935199737549, 0.35586848855018616), (-5.520336627960205, 0.637036144733429), (-5.4736552238464355, -0.037563227117061615), (-7.543992519378662, 0.9501991271972656), (-2.0016398429870605, 0.689761757850647), (-1.6980935335159302, -0.26763105392456055), (-7.927372932434082, -0.9065457582473755), (-0.35856080055236816, -0.6069566607475281), (6.874485015869141, 0.8840876817703247), (-2.3233087062835693, 0.04940364137291908), (-6.271153926849365, 0.4967961013317108), (5.7551093101501465, -0.9267368316650391), (-6.541121959686279, -0.3185189366340637), (6.689394950866699, -0.3200809359550476), (0.7223045825958252, -0.3750992715358734), (-5.160355567932129, -0.8436075448989868), (3.0267934799194336, 0.9934536218643188), (-7.223165512084961, 0.9733982086181641)]


import numpy as np
import math
a = np.zeros((1,4))
b = np.zeros((1,3))
a[0][3]=1
b[0][0]=-1
b[0][1]=0.1

def quat_apply(a, b):
    shape = b.shape
    a = a.reshape(-1, 4)
    b = b.reshape(-1, 3)
    xyz = a[:, :3]
    t = np.cross(xyz,b,axis=-1) * 2
    #t = xyz.cross(b, dim=-1) * 2
    return (b + a[:, 3:] * t + np.cross(xyz,t,axis=-1)).reshape(shape)
#np.cross()

def get_quaternion_from_euler(roll, pitch, yaw):
  """
  Convert an Euler angle to a quaternion.
   
  Input
    :param roll: The roll (rotation around x-axis) angle in radians.
    :param pitch: The pitch (rotation around y-axis) angle in radians.
    :param yaw: The yaw (rotation around z-axis) angle in radians.
 
  Output
    :return qx, qy, qz, qw: The orientation in quaternion [x,y,z,w] format
  """
  qx = np.sin(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) - np.cos(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)
  qy = np.cos(roll/2) * np.sin(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.cos(pitch/2) * np.sin(yaw/2)
  qz = np.cos(roll/2) * np.cos(pitch/2) * np.sin(yaw/2) - np.sin(roll/2) * np.sin(pitch/2) * np.cos(yaw/2)
  qw = np.cos(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)
 
  return [qx, qy, qz, qw]
xvel = -1
yvel = 0.1
speed = math.sqrt(xvel**2 + yvel**2)
angle = np.arctan2(yvel/speed,xvel/speed)
print(get_quaternion_from_euler(0,0,angle))